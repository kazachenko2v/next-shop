generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  password          String?        
  emailVerified     DateTime?

  username          String? @unique

  image       String?
  accounts    Account[]
  sessions    Session[]
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  gameId    String
  vote      Vote?

  @@index([authorId])
}

model Vote {
  // user      User     @relation(fields: [userId], references: [id])
  // userId    String
  comment   Comment  @relation(fields: [authorId, gameId], references: [authorId, gameId])
  authorId String   @unique
  // game      Game     @relation(fields: [gameId], references: [id])
  gameId    String   @unique
  type      VoteType

  @@id([authorId, gameId])
  // @@index([authorId, gameId])
}

model Game {
  id        String   @id
  votes     Vote[]
}

enum VoteType {
  UP
  DOWN
}